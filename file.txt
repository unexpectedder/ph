void	*meals_handler(t_philo *philo, t_table *table)
{
	philo->full = true;
	pthread_mutex_unlock(&table->data_mutex);
	print_status(philo, "is eating");
	is_sleep(table->time_eat);
	pthread_mutex_unlock(&philo->l_fork->fork);
	pthread_mutex_unlock(&philo->r_fork->fork);
	return (NULL);
}

void	*dining_cycle(t_philo *philo, t_table *table)
{
	pthread_mutex_lock(&philo->l_fork->fork);
	print_status(philo, "has taken a fork");
	if (table->ph_nbr == 1)
	{
		is_sleep(table->time_die);
		return (NULL);
	}
	pthread_mutex_lock(&philo->r_fork->fork);
	print_status(philo, "has taken a fork");
	pthread_mutex_lock(&table->data_mutex);
	philo->last_meal = get_timestamp();
	philo->meals_counter++;
	if (table->max_meals != -1 && philo->meals_counter == table->max_meals)
		return (meals_handler(philo, table));
	pthread_mutex_unlock(&table->data_mutex);
	print_status(philo, "is eating");
	is_sleep(table->time_eat);
	pthread_mutex_unlock(&philo->l_fork->fork);
	pthread_mutex_unlock(&philo->r_fork->fork);
	print_status(philo, "is sleeping");
	is_sleep(table->time_sleep);
	print_status(philo, "is thinking");
	return (NULL);
}

void	*routine(void *arg)
{
	t_philo	*philo;
	t_table	*table;

	philo = (t_philo *)arg;
	table = philo->table;
	table->end_sim = false;
	table->start_sim = get_timestamp();
	if (philo->id % 2 == 0)
	{
		print_status(philo, "is thinking");
		is_sleep(30);
	}
	while (1)
	{
		pthread_mutex_lock(&table->death_mutex);
		if (table->end_sim){
			pthread_mutex_unlock(&table->death_mutex);
			break ;
		}
		pthread_mutex_unlock(&table->death_mutex);
		dining_cycle(philo, table);
		if (table->ph_nbr == 1)
			break ;
	}
	return (NULL);
}

void	*monitor_routine(void *arg)
{
	t_table	*table;
	int		i;

	table = (t_table *)arg;
	table->philos->full_count = 0;
	while (1)
	{
		i = 0;
		while (i < table->ph_nbr)
		{
			if (ph_exitst(table, i))
				return (NULL);
			i++;
		}
		if (table->max_meals != -1 && \
		table->philos->full_count == table->ph_nbr)
		{
			pthread_mutex_lock(&table->death_mutex);
			table->end_sim = true;
			pthread_mutex_unlock(&table->death_mutex);
			return (NULL);
		}
		usleep(500);
	}
	return (NULL);
}

int	start_simulation(t_table *table)
{
	int			i;
	pthread_t	monitor;
	int			index;

	i = 0;
	table->start_sim = get_timestamp();
	while (i < table->ph_nbr)
	{
		table->philos[i].table = table;
		table->philos[i].last_meal = table->start_sim;
		if (pthread_create(&table->philos[i].tid, NULL, \
			routine, &table->philos[i]) != 0)
			return (-1);
		i++;
	}
	if (pthread_create(&monitor, NULL, monitor_routine, table) != 0)
		return (-1);
	index = -1;
	while (++index < table->ph_nbr)
		if (pthread_join(table->philos[index].tid, NULL) != 0)
			return (-1);
	if (pthread_join(monitor, NULL) != 0)
		return (-1);
	return (0);
}